/*
 * This file is generated by jOOQ.
 */
package xyz.walk8243.athleticstool.repositoryapi.infrastructure.database.entity.tables;

import java.time.LocalDateTime;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import xyz.walk8243.athleticstool.repositoryapi.infrastructure.database.entity.AthleticsTool;
import xyz.walk8243.athleticstool.repositoryapi.infrastructure.database.entity.Keys;
import xyz.walk8243.athleticstool.repositoryapi.infrastructure.database.entity.tables.records.PlayerBelongRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PlayerBelong extends TableImpl<PlayerBelongRecord> {

	private static final long serialVersionUID = 1L;

	/** The reference instance of <code>athletics-tool.player_belong</code> */
	public static final PlayerBelong PLAYER_BELONG = new PlayerBelong();

	/** The class holding records for this type */
	@Override
	public Class<PlayerBelongRecord> getRecordType() {
		return PlayerBelongRecord.class;
	}

	/** The column <code>athletics-tool.player_belong.id</code>. */
	public final TableField<PlayerBelongRecord, Integer> ID =
			createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

	/** The column <code>athletics-tool.player_belong.name</code>. */
	public final TableField<PlayerBelongRecord, String> NAME =
			createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

	/** The column <code>athletics-tool.player_belong.delete_flag</code>. */
	public final TableField<PlayerBelongRecord, Byte> DELETE_FLAG =
			createField(
					DSL.name("delete_flag"),
					SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.TINYINT)),
					this,
					"");

	/** The column <code>athletics-tool.player_belong.created_at</code>. */
	public final TableField<PlayerBelongRecord, LocalDateTime> CREATED_AT =
			createField(
					DSL.name("created_at"),
					SQLDataType.LOCALDATETIME(0)
							.defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)),
					this,
					"");

	/** The column <code>athletics-tool.player_belong.updated_at</code>. */
	public final TableField<PlayerBelongRecord, LocalDateTime> UPDATED_AT =
			createField(
					DSL.name("updated_at"),
					SQLDataType.LOCALDATETIME(0)
							.defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)),
					this,
					"");

	private PlayerBelong(Name alias, Table<PlayerBelongRecord> aliased) {
		this(alias, aliased, null);
	}

	private PlayerBelong(Name alias, Table<PlayerBelongRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/** Create an aliased <code>athletics-tool.player_belong</code> table reference */
	public PlayerBelong(String alias) {
		this(DSL.name(alias), PLAYER_BELONG);
	}

	/** Create an aliased <code>athletics-tool.player_belong</code> table reference */
	public PlayerBelong(Name alias) {
		this(alias, PLAYER_BELONG);
	}

	/** Create a <code>athletics-tool.player_belong</code> table reference */
	public PlayerBelong() {
		this(DSL.name("player_belong"), null);
	}

	public <O extends Record> PlayerBelong(Table<O> child, ForeignKey<O, PlayerBelongRecord> key) {
		super(child, key, PLAYER_BELONG);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : AthleticsTool.ATHLETICS_TOOL;
	}

	@Override
	public Identity<PlayerBelongRecord, Integer> getIdentity() {
		return (Identity<PlayerBelongRecord, Integer>) super.getIdentity();
	}

	@Override
	public UniqueKey<PlayerBelongRecord> getPrimaryKey() {
		return Keys.KEY_PLAYER_BELONG_PRIMARY;
	}

	@Override
	public PlayerBelong as(String alias) {
		return new PlayerBelong(DSL.name(alias), this);
	}

	@Override
	public PlayerBelong as(Name alias) {
		return new PlayerBelong(alias, this);
	}

	@Override
	public PlayerBelong as(Table<?> alias) {
		return new PlayerBelong(alias.getQualifiedName(), this);
	}

	/** Rename this table */
	@Override
	public PlayerBelong rename(String name) {
		return new PlayerBelong(DSL.name(name), null);
	}

	/** Rename this table */
	@Override
	public PlayerBelong rename(Name name) {
		return new PlayerBelong(name, null);
	}

	/** Rename this table */
	@Override
	public PlayerBelong rename(Table<?> name) {
		return new PlayerBelong(name.getQualifiedName(), null);
	}

	// -------------------------------------------------------------------------
	// Row5 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row5<Integer, String, Byte, LocalDateTime, LocalDateTime> fieldsRow() {
		return (Row5) super.fieldsRow();
	}

	/** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
	public <U> SelectField<U> mapping(
			Function5<
							? super Integer,
							? super String,
							? super Byte,
							? super LocalDateTime,
							? super LocalDateTime,
							? extends U>
					from) {
		return convertFrom(Records.mapping(from));
	}

	/** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
	public <U> SelectField<U> mapping(
			Class<U> toType,
			Function5<
							? super Integer,
							? super String,
							? super Byte,
							? super LocalDateTime,
							? super LocalDateTime,
							? extends U>
					from) {
		return convertFrom(toType, Records.mapping(from));
	}
}
